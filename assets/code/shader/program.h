#pragma once
#include <stdafx.h>

class Material;

//shader程序类的基类
class Program
{
public:
	//基类构造函数：创建一个Shader程序
	Program();

	//获取程序ID
	GLuint getID();

	//附加一个Shader
	void AttachShader(GLenum shaderType, const std::string& filepath);

	// 链接编译所附加的所有Shader，生成Shader程序
	void Link();

	//使用该Shader程序
	void Use() const;

	//给着色器程序传输一致变量的一些接口
	#pragma region 传输基本数据类型
	void setBool(const std::string& name, bool value) const
	{
		glUniform1i(glGetUniformLocation(ID, name.c_str()), value);
	}
	
	void setInt(const std::string& name, int value) const
	{
		glUniform1i(glGetUniformLocation(ID, name.c_str()), value);
	}

	void setUnsignedInt(const std::string& name, unsigned int value) const
	{
		glUniform1ui(glGetUniformLocation(ID, name.c_str()), value);
	}

	void setFloat(const std::string& name, float value) const
	{
		glUniform1f(glGetUniformLocation(ID, name.c_str()), value);
	}
	#pragma endregion
	
	#pragma region 传输向量
	void setVec2(const std::string& name, const glm::vec2& value) const
	{
		glUniform2fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
	}
	void setVec2(const std::string& name, float x, float y) const
	{
		glUniform2f(glGetUniformLocation(ID, name.c_str()), x, y);
	}
	
	void setVec3(const std::string& name, const glm::vec3& value) const
	{
		glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
	}
	void setVec3(const std::string& name, float x, float y, float z) const
	{
		glUniform3f(glGetUniformLocation(ID, name.c_str()), x, y, z);
	}
	
	void setVec4(const std::string& name, const glm::vec4& value) const
	{
		glUniform4fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
	}
	void setVec4(const std::string& name, float x, float y, float z, float w)
	{
		glUniform4f(glGetUniformLocation(ID, name.c_str()), x, y, z, w);
	}
	#pragma endregion

	#pragma region 传输矩阵
	void setMat2(const std::string& name, const glm::mat2& mat) const
	{
		glUniformMatrix2fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
	}
	
	void setMat3(const std::string& name, const glm::mat3& mat) const
	{
		glUniformMatrix3fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
	}
	
	void setMat4(const std::string& name, const glm::mat4& mat) const
	{
		glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
	}
	#pragma endregion

	~Program();
	Program& operator=(Program const& r) = delete;

protected:
	GLuint ID;//该shader程序的ID

private:
	std::vector<GLuint> shaders;//存放所有的ID

	//输出shader编译或链接时的错误信息
	void CheckErrors(GLuint shader, GLenum shaderType);

};

